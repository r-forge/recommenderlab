\documentclass[fleqn, a4paper]{article}
\usepackage{a4wide}
\usepackage[round,longnamesfirst]{natbib}
\usepackage{graphicx,keyval,thumbpdf,url}
\usepackage{hyperref}
\usepackage{Sweave}
\SweaveOpts{strip.white=TRUE}
\AtBeginDocument{\setkeys{Gin}{width=0.6\textwidth}}

%\documentclass[article]{jss}

\usepackage[utf8]{inputenc}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{amsmath}
\usepackage{amsfonts}


\newcommand{\strong}[1]{{\normalfont\fontseries{b}\selectfont #1}}
\newcommand{\class}[1]{\mbox{\textsf{#1}}}
\newcommand{\func}[1]{\mbox{\texttt{#1()}}}
\newcommand{\code}[1]{\mbox{\texttt{#1}}}
\newcommand{\pkg}[1]{\strong{#1}}
\newcommand{\samp}[1]{`\mbox{\texttt{#1}}'}
\newcommand{\proglang}[1]{\textsf{#1}}
\newcommand{\set}[1]{\mathcal{#1}}
\newcommand{\sQuote}[1]{`{#1}'}
\newcommand{\dQuote}[1]{``{#1}''}
\newcommand\R{{\mathbb{R}}}

\DeclareMathOperator*{\argmin}{argmin}
\DeclareMathOperator*{\argmax}{argmax}

\hyphenation{Brusco}
\sloppy

%% \VignetteIndexEntry{An introduction to the R package recommenderlab}

\begin{document}

\title{\pkg{recommenderlab}: Infrastructure for Testing and 
Developing Recommender Algorithms for Binary Data}
\author{Michael Hahsler}
\maketitle
\sloppy


\abstract{
   \pkg{recommenderlab} provides the infrastructure to test and develop
       recomender algorithms. Currently the focus is on recommender
           systems for binary data.
    }


<<echo=FALSE>>=
options(scipen=3, digits=4)
### for sampling
set.seed(1234)
@

\section{Introduction}
\section{Recommender algorithms}
\section{recommenderlab infrastructure}
\section{Examples}
\subsection{A first session}

For this example we use the data set \emph{MSWeb} which is included in
\pkg{recommenderlab}. 
\marginpar{introduce data}

<<>>=
library("recommenderlab")
data(MSWeb)

MSWeb_5 <- MSWeb[size(MSWeb) >5]
MSWeb_5
@

The data is stored in sparse format as an object of \class{itemMatrix}
defined in package \pkg{arules} which holds a sparse item incidence matrix
and item information (e.g., item names).

A recommender is created using \func{recommender}.
Here we create a simple recommender which generates recommendations 
solely on the popularity of items (the number of users who have the item in
their profile).

<<>>=
r <- recommender(MSWeb_5, method = "POPULAR")
r

str(recommender_model(r))
@

The model can be obtained from a recommender using \func{recommender_model}.
In this case the model is just an vector containing the order of items
according to popularity in the data set and a short description.

Recommendations are generated by \func{predict} in the same way \func{predict}
is used in \proglang{R} for other types of models. The result 
are recommendations in sparse format represented as an \class{itemMatrix}.
\function{inspect} (defined in \pkg{arules}) can be used to
print the recommended items.

<<>>=
recom <- predict(r, MSWeb_5[1:2], n=5)
recom
inspect(recom)
@


\subsection{Evaluation}

\pkg{recommenderlab} provides different evaluation methods. The evaluation
method is determined by choosing an evaluation scheme. Here we create
a $4$-fold cross-valiadation scheme with 3 items given.
\marginpar{explain more.}

<<>>=
es <- evaluation_scheme(MSWeb_5, method="cross", k=4, given=3)
es
@

<<>>=
Ns <- c(1,5,10,20)
conf_m <- evaluate(es, method="POPULAR", N=Ns)
conf_m
@

<<fig=TRUE>>=
plot(conf_m)
@

<<fig=TRUE>>=
plot(conf_m, plot_type="prec/rec")
@

\subsection{Comparing different methods}


<<echo=FALSE>>=
load("conf_m.rda")
@

<<eval=FALSE>>=
## this needs to be saved to disk!
algorithm <- list(
        RANDOM = list(name="RANDOM", para=NULL),
        POPULAR = list(name="POPULAR", para=NULL),
        UBCF = list(name="UBCF", para=list(method="cosine", nn=50)),
        IBCF = list(name="IBCF", para=list(k=30)),
        AR = list(name="AR", para=list(supp=0.05, conf=0.5, maxlen=2))
        )

## run algorithms
conf_m <- lapply(algorithms, FUN = function(a) evaluate(es, a[["name"]], N=Ns,
            parameter=a[["param"]]))

onf_m <- evaluation_list(conf_m)

## save(conf_m, file="conf_m.rda")
@

<<fig=TRUE>>=
plot(conf_m)
@

<<fig=TRUE>>=
plot(conf_m, plot_type="prec/rec")
@

\marginpar{getting data in missing!}
\subsection{ROCR interface}

\subsection{Implementing a new recommender}

\section{Conclusion}

%
%\bibliographystyle{abbrvnat}
%\bibliography{recommenderlab}
%
\end{document}

